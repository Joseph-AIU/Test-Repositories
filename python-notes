Agenda for the Python Training Program:

https://pythoninstitute.org/pcep

LECTURE ONE:	2 - 3 hours Tuesday November 15th, 2022 at 7pm - 10pm MST
1.1 Introduction to Python
- Definition
What is Python:
Python is a high level general purpose programming language. 
Python is general purpose because it can be used in various 
occupations by software engineers, data analysts, mathematicians,
scientists, accountants, network engineers, etc. In fact, 
Python is the ideal programming language to learn first.
So with python, you can solve complex problems with just 
few lines of code. 

- Use Cases
Application Areas of Python:
Web-application development
API Development
Data Analysis
Artificial Intelligence
.
.
. 
Automation (This is what matters to us as DevOps Engineers)

- Python Installation 
*We are using VSCode for hands-on practice. 
Useful code editors to have: 1. Pycharm     2. Sublime      3. Atom

- Popular Organisations that use Pythong
Five most popular companies that use Python:
  1. Youtube
  2. Spotify
  3. Instagram
  4. Dropbox
  5. Pinterest 
  6. Facebook

  What makes Python very popular:
  - easy to learn
  - pre-defined and third party modules (samples) to use. 147k modules
  - code length is very short because of the availability of modules.
  - platform independent. you can use it on any OS. 
  Python has been around for over 20 years.

1.2 Print Functions 
1.3 Literals 
1.4 Arithmetric Operators 
1.5 Python Variables 
1.6 Input Functions 
1.7 String



# 1.2 Print Functions in Python
# in bash we use echo 
# in python, we use print 
print("Welcome to Acada Learning")
print('Welcome to Acada Learning')
print("Welcomne", "to", "Acada", "Learning", "Comrades")
Key word arguments to print functions:
    Keyword arguments (or named arguments) are values that, 
    when passed into a function, are identifiable by specific 
    parameter names. A keyword argument is preceded by a parameter 
    and the assignment operator, =.
1. end=""
2. sep=""
print("Hello", end="! ");\
    print("Python is a great programming language")
print("Hello", "DevOps Engineers", sep="! ", end=" Cheers\n");\
    print("So", "are you enjoying python so far?", sep=", ", end=" I guess YOU ARE")
Assignment 1
a. print(1, 2, 3, 4, sep='#', end='&')
b. print("Hello" + " " "future" + " " "DevOps Engineers!")
c. print("My account balance is " + 7000)

print(1, 2, 3, 4, sep='#', end='&')
print("Hello" + " " "future" + " " "DevOps Engineers!")
print("My account balance is " + 7000)
1.3 LITERALS 
1. Integers  aka int
eg. 1, 2, ......., 90, ......, 180,000
When dealing with integers you don't need a quotation mark

2. Floating Point Numbers (Float) aka fl
eg. 1.1, ....., 52.08, ......, infinity
When dealing with floats you don't need a quotation mark

3. Strings aka str
eg. mango, winter, money, DevOps Engineer, etc
We need a single or double quotation

4. Booleans aka bool
eg. True and False
Numeric false 0
Numeric true 1 
no quotation mark is needed
print(type("hello"))
print(type(45.55))
print(type(3_00_0000_000))
(type(3_00_0000_000))
1.4 ARITHMETRIC OPERATORS 
Addition +
eg. print(2 + 4)  ==>> output is 6

Subtraction - 
eg. print(8 - 2)  ==>> output 6

Multiplication * 
eg. print(3 * 2)  ==>> output 6

Division /          NB: Whenever you use a division, the output would be a float
eg. print(12 / 2) ==> output 6
eg. print(13 / 2) ==> output 6.5

Floor or Double Division //         NB: This will always produce a whole number
eg. print(13 // 2)  ==> output 6

Modular Operator %
eg. print(15 % 4)  ==> output 3

Exponential/Power Operator **
eg. print(2 ** 3)  ==> output 8

NB: Python uses what we call BODMAS in Math in performing Arithmetric Operations
B = Brackets
O = Orders (indices or powers or roots)
D = Division 
M = Multiplication
A = Addition
S = Subtraction 

print(2 * 3 ** 4)
print(10 - 6 ** 2 / 9 * 10 + 1)
print(6. // 4)
print(2 * (2 + 3))
x = 10 / 4
y = 5 / 2.0
print(x + y)

print(13 / 4 + 13 % 4)
1.5 PYTHON VARIABLES 
We use variables to temporarily store data in the compute memory. 

Python reads commands from top to bottom
age = 20
age = 30
print(age)
Defining variables in Python
Dela_Amos = "cohort 8"
True, False, print, and, or, else, etc. We don't define python variables with the items on this line. 

x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)
x, y, z = "Orange", "Banana", "Cherry"
print(x, y, z)
y = 5
y = "Acada"
print(y)
amount = 4 
cost = 2
cost += 2
print(amount * cost)
age = 22 
AGE = 44 
age /= 2
print(age + AGE)
1.6 INPUT FUNCTIONS 
We use input functions to take inputs from users. 

In bash, we use ==== read
In python, we use ==== input
name = input("What's your name? ")
print("Hey " + name)
# We want to write a code to compute users' ages
name = input("What's your name? ")
print("Hey " + name)
birth_year = input("Please enter your year of birth: ")
age = 2022 - birth_year
print(age)
name = input("What's your name? ")
print("Hey " + name)
birth_year = int(input("Please enter your year of birth: "))
age = 2022 - birth_year
print(age)
name = input("What's your name? ")
print("Hey " + name)
birth_year = input("Please enter your year of birth: ")
age = 2022 - int(birth_year)
print(age)
# Let's write a simple code to be used as a calculator.

print("Please follow the instructions on the screen to compute your numbers")
first_num = int(input("Enter your first number: "))
second_num = int(input("Enter your second number: "))
sum = first_num + second_num
print("The sum of your two numbers is: " + str(sum))
print("Please follow the instructions on the screen to compute your numbers")
first_num = float(input("Enter your first number: "))
second_num = float(input("Enter your second number: "))
sum = first_num + second_num
print("The sum of your two numbers is: " + str(sum))
Break Assignment: 
What is the output of the following code:

inputString = input("Enter a string: ")
print(inputString, sep='#', end='&')

Take Home Assignment:
In bash, when we want to take a secret text, we run read -s. 
How do we do the same in Python? 
inputString = input("Enter a string: ")
do_it = input("Please enter what you want to do: ")
print(inputString, do_it, sep=' # ', end=' &')
1.7 STRING
String is a collection of alphabets, words or other characters. 
It is one of the primitive data structures and are the building 
blocks for data manipulation. Python has a built-in string class 
named str . Python strings are "immutable" which means they cannot 
be changed after they are created.

examples of strings: 
x = "10.0.0.26"
y = "50"
name = "Acada Learning" 
course = "DevOps Engineering"
print(len(course))
print(course[0])
print(course[-3])
print(course[0:3])
print(course[:])
print(course[0:])
print(course[:3])
# Formatting Strings 

first = "Acada"
last = "Learning"
full = first + " " + last 
print(full)
first = "Acada"
last = "Learning"
print(f"{first}  {last}")
                                                    STRING METHODS 
course = "Acada Learning"
print(course.upper())
print(course.lower())
print(course.title())
print(course.find("Eng"))
print("Learn" in course)
print(course.replace("Acada", "Python"))
print("Learning" not in course)
Num = input("Enter a number: ")
print(Num * 3)
x = 5
y = "Francisca"
print(str(x) + y)
inputString = input("Enter a string: ")
print(inputString * 2)
                    END OF LECTURE ONE
LECTURE TWO 2 - 3 Hours         Saturday November 19, 2022 (A day before world cup)

2.1 Comparison Operators 
2.2 Conditional Statements 
2.3 Ternary Operator
2.4 Loops 
2.5 Logial Operators 

2.1 COMPARISON OPERATORS 
Python supports the usual logical conditions in mathematics.

Equals ==
eg. a == b

Not Equal !=
eg. a != b

Less than <
eg. 5 < 6

Less than or equal to   <=
eg. 5 <= 6

Greater than >
eg. 6 > 5

Greater than or equal to >=
eg. 6 >= 5

These conditions can be used in several ways, most commonly in "if statements" and "Loops"
x = 6
y = 7
print(x != y)
y = 20
y += 3
x = y
print(x)
min_score = 13
score = 13
print(score > min_score)
print(score <= min_score)
print(10 == "10")
print("bag" > "apple")
print("bag" > "BAG")
ord("B")

2.2 CONDITIONAL STATEMENTS 
A conditional statement as the name suggests itself, is used to handle conditions in your program. 
These statements guide the program while making decisions based on the conditions encountered by the program. 
Python has 3 key Conditional Statements that you should know: 

- If Statement
- If-else Statement
- If-elif-else statement
2.2.1 IF STATEMENT
The if statement is a conditional statement in python, 
that is used to determine whether a block of code will be executed or not. 
Meaning if the program finds the condition defined in the if statement to be true, 
it will go ahead and execute the code block inside the if statement.

Syntax: 
if condition: 
    execute the code block here. 
age = int(input("How old are you? "))
if age >= 18:
    print("You are an adult")
    print("Your age is: " + str(age))
age = int(input("How old are you? "))
if age >= 18:
    print("You are an adult")
print("Your age is: " + str(age))
z = 6
if z % 2 == 0:
    print("Z is an even number")
2.2.2 IF-ELSE STATEMENT
As discussed above, the if statement executes the code block when the condition is true. 
Similarly, the else statement works in conjuncture with the if statement to execute a code block 
when the defined if condition is false.

Syntax
if condition:
    execute cod if condition is true 
else: 
    execute the code if condition is False 

age = int(input("How old are you? "))
if age >= 18:
    print("You are an adult")
else:
    print("You are a minor")
print("Hello Welcome to Acada Learning. Please introduce yourself.")
name = input("What is your name?: ")
if name == "Zazu":
    print("You're not welcome to Acada Learning")
else: 
    print("Hello " + name + ", thank you so much for coming")
# List of African Countries at the World Cup

af_qatar = ["Ghana", "Morocco", "Senegal", "Cameroon", "Tunisia"]
af_country = input("Please enter the name of your country: ")
if af_country in af_qatar:
    print('Your country is at the world cup')
else:
    print('Unfortunately, your country could not qualify')

2.2.3 IF-ELIF-ELSE STATEMENT OR LADDER
The elif statement is used to check for multiple conditions and execute the code block 
within if any of the conditions is true.

The elif statement is similar to the else statement in the context that it is optional 
but unlike the else statement, there can be multiple elif statements in a code block following an if statement.

Syntax

if condition1:
    # execute this statement
elif condition2:
    # execute this statement
.
.
else:
    # if non of the above conditions
    # evaluate to True
    # execute this statement
temperature = int(input("Input the temperature"))
if temperature >= 30:
    print("It's a hot day")
    print("Drink a lot of water")
elif temperature > 20:
    print("It's a nice day")
    print("Go to the beach")
elif temperature > 10:
    print("It's a bit cold")
else: 
    print("It's cold")
    print("Please wear a jack")
a = float(input("Enter first number: "))
b = float(input("Enter second number: "))
if b < a: 
    print("a is greater than b")
elif a == b:
    b = 5
    print("a and b are equal")
else:
    print("b is greater than a")
x = 3
if (x == 0):
    print("Am I here?")
elif (x == 3):
    print("or here?")
print("or over here?")
2.3 TERNARY OPERATOR 
age = 12
if age >= 18:
    message = "Eligible"
else:
    message = "Not Eligible"
print(message)
age = int(input("Enter your number: ")) 
message = "Eligible" if age >= 18 else "Not Eligible"
print(message)
2.4 LOOPS
Looping means repeating something over and over until a particular condition is satisfied.
In this course, we'll concentrate on:
    - For Loops 
    - While loops 

Before we do loops, let's briefly look at Range Function in Python

range(5)    ==> 0, 1, 2, 3, 4
range(10,15)    ==> 10, 11, 12, 13, 14

range(1, 10, 3)
1 is the beginning
10 is the limit
3 is the step
therefore range(1, 3, 10) becomes ==> 1, 4, 7
x = range(1, 10, 3)
for i in x: 
    print(i)

2.4.1 FOR LOOPS
A for loop in Python is a control flow statement that is used to repeatedly execute 
a group of statements as long as the condition is satisfied.
for number in range(3):
    print("You're person #", (number + 1))
for number in range(3):
    print("Attempt", (number + 1) * ".")
x = [1, 2, 3, 4]
for i in x: 
    if ( i == 2): 
        break 
    print("i is: ", i)
b = [20, 10, 5]
for e in b: 
    print(e)
# let's print even numbers in a list
list1 = [10, 21, 4, 45, 66, 93]
for num in list1: 
    if num % 2 == 0: 
        print(num, end=" ")
list1 = [10, 21, 4, 45, 66, 93]
for num in list1: 
    if num % 2 == 0: 
        print(num)
list1 = [10, 21, 4, 45, 66, 93]
for num in list1: 
    if num % 2 == 0: 
        print(num, end=" #")
x = range(99, 0, -1)
for i in x: 
    if i % 2 == 0: 
        print(i)
x = range(99, 0, -2)
for i in x:
    print(i)
2.4.2 WHILE LOOPS 

secret_pin = 4421
pin = int(input("Please enter your pin: "))
while pin != secret_pin:
    pin = int(input("Enter your pin: "))
else: 
    print("Congratulations, you're logged in!")
# Write a python program to take range limits from user input 
# and print the even numbers in the range

start = int(input("Enter the start of range"))
end = int(input("Enter the end of range: "))
for num in range(start, end + 1):
    if num % 2 == 0: 
        print(num)
General Notes about if/else, while loop and for loops:
- if/else statements allow us to conditionally run cocde 
- a while loop makes it possible to repetitively execute code based on a certain condition. 
- we can execute code for each item in a sequence with a for ... in loop makes

2. 5 LOGICAL OPERATORS 

- AND   =   Returns True if both statements are true
- OR    =   Returns True if one of the statements is true
- NOT   =   Reverses the result, returns False if the result is true
income = float(input("Please enter your income: "))
credit = int(input("Please enter your credit score: "))

if income >= 100000 and credit >= 700: 
    print("You're eligible for Mortgage.")
else: 
    print("You're not eligible for Mortgage")
income = float(input("Please enter your income: "))
credit = int(input("Please enter your credit score: "))

if income >= 100000 or credit >= 700: 
    print("You're eligible for Mortgage.")
else: 
    print("You're not eligible for Mortgage")
age1 = int(input("Oluwafemi, enter your age: "))
age2 = int(input("Dela, enter your age: "))

if age1 > 18 and age2 >= 18: 
    print("You are both adults")
else: 
    print("You are both children or minors")
income = float(input("Please enter your income: "))
credit = int(input("Please enter your credit score: "))
student = True
#student = bool(input("Are you a student? Enter True or False: "))

if (income >= 100000 or credit >= 700) and not student: 
    print("You're eligible for Mortgage.")
else: 
    print("You're not eligible for Mortgage")
hungry = False 
if (not hungry):
    print("You are not hungry.")
else: 
    print("You are hungry.")
                END OF TODAY'S CLASS 
                HAPPY LEARNING
# Class one take home assignment 

from getpass import getpass

user = input("Enter your username: ")
password = getpass("Password: ")
print(user, password)

LECTURE THREE:	2 - 3 hours Tuesday November 22nd, 2022 at 7pm - 10pm MST

3. 1 LISTS
3.2 FUNCTIONS 
3.1 Lists 
eg.
x = [7, "Efe", "Judith", 8.6, False, "Susan", True]
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
print(north_america)
"Barbados", "Belize", "Canada", "Haiti", "United States"
    0           1       2           3           4
   -5          -4      -3          -2          -1

north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
print(north_america[0])
print(north_america[-2])
print(north_america[1])
print(north_america[18])
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
print("Francisca is in the " + north_america[-1])
print(len(north_america))
numbers = list(range(20))
for item in numbers:
    print(item)
chars = list("Hello World")
print(chars)
list1 = [10, 11, 12, 13, 14]
for item in list1:
    print(list1[::3])
(x, y, z)
x is the beginning
y is the end
z is the step
list1 = [4, 3, 2, 1]
print(list1[::-1])
- Modifying Items in Lists aka List Methods 
append()    Adds an element at the end of the list
insert()    Adds an element at a specified position
clear()     Removes all the elements from the list
copy()      Returns a copy of the list
count()     Returns the nunmber of elements with the specified value
extend()    Add the elements of a list (or any iterable), to the end of the current list
index()     Returns the index of the first element of the specified value
pop()       Removes element at the end of the list
remove()    Removes the item with the specified value if you don't want to use index
reverse()   Reverses the order of the list
sort()      Sorts the list
del()       Removes an item with a specified value

x = [7, "Efe", "Judith", 8.6, False, "Susan", True]
x.insert(-1, "Edna")
print(x)
x = [7, "Efe", "Judith", 8.6, False, "Susan", True]
x.remove("Judith")
print(x)
ages = [56, 72, 24, 46]
ages.sort()
print(ages)
ages = [56, 72, 24, 46]
ages.reverse()
print(ages)
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
north_america[1] = 'Grenada'
north_america[-3] = 'Honduras'
print(north_america)
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
north_america[1:-3] = ['Grenada', 'Honduras']
print(north_america)
sea_creatures = ['shark', 'octopus', 'turtle', 'dolphin', 'shrimp', 'crab']
del sea_creatures[-3]
print(sea_creatures)
sea_creatures = ['shark', 'octopus', 'turtle', 'dolphin', 'shrimp', 'crab']
del sea_creatures[1:5]
print(sea_creatures)
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
north_america[0], north_america[1] = north_america[1], north_america[0]
print(north_america)
x, y = 2, 4
x = 2
y = 4
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
north_america[0], north_america[1] = north_america[2], north_america[3]
print(north_america)
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
north_america[0], north_america[1], north_america[-1] = north_america[2], 'Costa Rica', 'Cayman Islands'
print(north_america)
list1 = ["Go", "Java", "C", "Python"]   # some programming languages 
print(max(list1))
list1 = ["Go", "Java", "CAT", "Apple", "Python"]   # some programming languages 
print(min(list1))
list1 = [4, 3, 2, 1]
list1.pop(2)
# print(list1)
list = ['UK', 'India', 'Canada']
list.insert(2, 8)
print(list)
- Iterating Lists

letters = ['a', 'b', 'c']
for letter in letters: 
    print(letter)
ages = [56, 72, 24, 46]
total = 0
for age in ages:
    total += age 
average = total / len(ages)
print(average)    
ages = [56, 72, 24, 46]
total = 0
for apple in ages:
    total = total + apple 
average = total / len(ages)
print(average)
for letter in "AcadaLearning":
    if letter == 'd':
        continue 
    print('Letter : ' + letter)
for letter in "AcadaLearning":
    if letter == 'L':
        break 
    print('Letter : ' + letter)
List Slicing
north_america = ["Barbados", "Belize", "Canada", "Haiti", "United States"]
print(north_america[1:4])
print(north_america[:3])
print(north_america[2:])
print(north_america[-4:-2])
sea_creatures = ['shark', 'octopus', 'turtle', 'dolphin', 'shrimp', 'crab']
oceans = ['Pacific', 'Atlantic', 'Indian', 'Sourthern', 'Artic']
print(sea_creatures + oceans)
print(sea_creatures * 2)
print(oceans * 3)
x = ['Africa']
print(x * 30)
our_list = [['shark', 'octopus', 'turtle', 'dolphin', 'shrimp', 'crab'], ['Pacific', 'Atlantic', 'Indian', 'Sourthern', 'Artic']]
print(our_list[1][0])
print(our_list[0][0])

LECTURE FOUR:	2 - 3 hours Saturday November 26th, 2022 at 12pm - 3pm MST

4.1 Functions
4.2 Tuples 
4.3 Dictionary
4.4 Modules or Python Packages  
4.1 FUNCTIONS 
In Python, a function is a group of related statements that performs a specific task. 
Functions help break our program into smaller and modular chunks. As our program 
grows larger and larger, functions make it more organized and manageable.
In Python, a function is a group of related statements that performs a specific task. 
Functions help break our program into smaller and modular chunks. As our program 
grows larger and larger, functions make it more organized and manageable.

eg. of functions include print, input, type, len, etc these are inbuilt python
functions. To create our own functions, we follow the examples below. 
def greet():
    print("Hi there")
    print("Welcome to Acada Learning")

greet()
def greet(name): 
    print("Hello, " + name + ". Welcome to Acada Learning")
    
greet("Francisca")
def greet(first_name, last_name):
    print(f"Hi {first_name} {last_name}")
    print("Welcome to Acada Learning")
    
greet("Susan", "Jamesbrown")
def increment(number, by): 
    return number + by 

print(increment(number=2, by=3))
def multiply(*numbers):
    for number in numbers:
        print(number)
        
multiply(2, 3, 4, 5)
def multiply(*numbers):
    total = 1
    for number in numbers:
        total *= number 
    return total
        
multiply(2, 3, 4, 5)
5! 
5x4x3x2x1
def my_function(*students):
    print("The tallest student is " + students[-2])

my_function("Susan", "Francisca", "Eseoghene")
def print_info(name, age):
    print(name, age)
    
print_info("Victor", 20)
a = 0

def add_one(a):
    return a + 1 

result = add_one(a)
print(result)

b = 4

print(a + b)
4.2 Tuples 
Tuple is a read only list. 

NB: tuples are immutable so we can't append, insert, del, etc. 
You can create a tuple using int, float, etc. 


eg. 

x = 1, 


tuple1 = (1, 2, 3)
print(type(tuple1))
print(tuple1)
tuple1 = 1, 2, 3
print(type(tuple1))
print(tuple1)
tuple1 = (1, 2, 3)
for item in tuple1:
    print(item)
point = (1, 2) + (3, 4)
print(point)
point = ("orange", "Susan") + ("Argentina", "Mexico")
print(point)
point = (1, 2) * 3
print(point)
point = tuple(["Apple", "Acada", 1, 2])
print(point)
point = ("Acada", "DevOps", "Learning", 1, 2, 3)
print(point[-2])
print(point[0:2])
range(2)
0
1
4.3 Dictionaries in Python

We use dictionaries to match a key to a value. 
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

print(candidates["LP"])
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

print(candidates.keys())
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

for key in candidates.keys():
    print(key + " - " + candidates[key])
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

print(candidates.values())
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

print(candidates.items())
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

del candidates["APC"]
print(candidates)
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

candidates.clear()
print(candidates)
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

candidates.popitem()
print(candidates)
candidates = {
    "YPP": "Prince Malik",
    "AAC": "Omoyele Sowore",
    "LP": "Peter Obi",
    "APC": "Bola Tinubu",
    "PDP": "Atiku Abubakar"
}

flagbearers = candidates.copy()
print(flagbearers)
4.5 Relevant Modules for a DevOps Engineer 

In Python, Modules are simply files with the “. py” extension containing 
Python code that can be imported inside another Python Program. In simple terms, 
we can consider a module to be the same as a code library or a file that contains 
a set of functions that you want to include in your application


Here are the most important python modules you need to know as a DevOps Engineer. 



1. Requests Module 
- Useful for Web development and HTTP Requests 
- GET 
- POST 
- PUT 
- DELETE 

All these methods perform particular actions like adding a comment (PUT), 
retrieving data (GET), or deleting a user field (DELETE).

import requests 
r = requests.get("https://api.github.com/repos/psf/requests")
print(r.json()['description'])
print(r.json())


2. Paramiko 
Python Paramiko allows users to log in to a virtual machine’s server using automation 
scripts. It enables the users to perform ad-hoc commands by using SSH client. 
All commands get executed in the connected remote machines.

eg. 

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(ip, username=user, password=passwd)
stdin, stdout, stderr = ssh.exec_command("command")
out = stdout.readlines()


3. Pandas 
Pandas module is for data manipulation. It is the most useful module for data 
science engineers. But in DevOps, Pandas helps to store the massive dump of 
data into CSV or Excel files within seconds.

eg. 
import pandas as pd 

pd.read_json("file.json").to_excel("output.xlsx")


4. selenium
One of the most popular modules used in Python to perform testing and connect 
to different browsers. By using Selenium with Python, we can hit a URL and perform 
actions like clicking on a button.

eg. 
from selenium import webdriver
driver = webdriver.Chrome()
driver.get("https://www.gspann.com")


5. Beautiful Soup
Beautiful Soup in Python is the most useful module for 
pulling data from HTML and XML files

eg. 
URL = “https://www.gspann.com”
content = urllib2.urlopen(url).read()
soup = BeautifulSoup(content)


6. OS 
The operating system in Python is a basic module. It performs ad-hoc commands 
on the base OS, which we are executing. All commands run on the current machine.

eg. 
os.system(“dir”)



7. JSON 
JSON is the syntax for storing data in the form of dictionaries and lists. 
Python JSON is a built-in module that can parse the JSON data and even convert 
the other type of data into JSON format


eg. 
x = {
    [“data”,”stored”]
    }
json.dump(x)


8. XLWT 
This module helps to create an Excel file and store data after 
customizing it according to the cells. It is a good module to work 
with Excel files, but it takes more time when compared to Pandas. 
This module allows the user to define the logic according to the requirement, 
like filling data only in a particular cell.


eg. 
x=Workbook()
sheet=x.add_sheet()
sheet.write()


Other Python Useful Modules
- platform
- Time 
import requests 

r = requests.get("https://api.github.com/repos/psf/requests")
print(r.json()['description'])
print(r.json)
income = float(input("Please Enter Your Income: "))
credit = int(input("Please Enter Your Credit Score: "))
#student = True
student = bool(input("Are you a student? Enter True or False: "))

if (income >= 100000 or credit >= 700) and not student:
    print("You're eligible for Mortgage. ")
else:
    print("You're NOT eligible for Mortgage. ")

income = float(input("Please enter your income: "))
credit = int(input("Please enter your credit score: "))
student = True
student = input("Are you a student? Enter True or False: ")

if (income >= 100000 or credit >= 700) and student != "True" :
    print("You're eligible for Mortgage.")
else: 
    print("You're not eligible for Mortgage")

income = float(input("Please Enter Your Income: "))
credit = int(input("Please Enter Your Credit Score: "))
#student = True
student = input("Are you a student? Enter Yes or No: ")

x = True if student == "Yes" else False

if (income >= 100000 or credit >= 700) and not x:
    print("You're eligible for Mortgage. ")
else:
    print("You're NOT eligible for Mortgage. ")

LECTURE FIVE:	2 - 3 hours Tuesday November 29th, 2022 at 7:30pm - 10pm MST
Create 2 AWS Instances      AMI of choice = Ubuntu
- Name one Python and in that instance, create at least 4 directories and as many files as possible with extensions:
        txt, pdf, jng, sh, etc  except json and py. 

- In the other instance, Name it RemoteServer
Python Installation in Ubuntu

sudo apt-get update
sudo apt-get upgrade 
python3 --version
sudo mkdir <name_of_dir>
cd <name_of_dir>

python3 --version
sudo apt-get install python3 virtualenv  

- let's now activate the environment and then change our directory to project directory
source <project_name>/bin/activate

Please create create a simple python script in your cli 
eg. 
sudo vi hello.py and type in || print("Hello World")
save and quit

run the script by running:
python3 hello.py 

to see the script, run cat hello.py

see you in 10 minutes.

1. Python script to clear your screen and to find list of dir and files 
This code would run on both windows and linux

2. Reading and writing to text files using Python 
# python script to clear and list dir and files.
#!/usr/bin/env python

import os 
import time 
import platform

def mycode(cmd1, cmd2):
    print("Please wait. Cleaning the screen...... ")
    time.sleep(2)
    os.system(cmd1)
    print("Please wait, finding the list of dir and files")
    time.sleep(2) 
    os.system(cmd2)
if platform.system() == "Windows":
    mycode("cls", "dir")
else: 
    mycode("clear", "ls -lrt")
#!/usr/bin/env python
file_ops = open("random.txt", "w")
file_ops.write("This is the first line\n")
file_ops.write("This is the second line\n")
file_ops.write("This is the third line")
file_ops.close()
# Copying the contents of a file to another file
import shutil

sfile = "/home/ubuntu/python_script/random.txt"
dfile = "/home/ubuntu/python_script/acada"
shutil.move(sfile, dfile)
#sfo = open(sfile, 'r')
#content = sfo.read()
#sfo.close()

import shutil

#sfile = "/home/ubuntu/python_script/random.txt"
#dfile = "/home/ubuntu/python_script/acada"
sfile = input("Enter your source file: ")
dfile = input("Enter your destination: ")
shutil.move(sfile, dfile)
# Transfer files from local env to remote server

import paramiko

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy)
ssh.connect(hostname='34.213.40.18', username='ubuntu', key_filename='Oregon.pem', port=22)
sftp_client = ssh.open_sftp()

sftp_client.get('/home/ubuntu/acada_python/paramiko_download.txt', 'paramiko_downloaded.txt')

sftp_client.close()
ssh.close()

PYTHON-AWS PROJECTS 

python <nameofpythonfile>.py        To make a directory in windows, we use ==> lmkdir  : file ==> type nul > hello.txt  

1. Python script to clear your screen and to find list of dir and files 
This code would run on both windows and linux 

#!/usr/bin/env python

import os
import time
import platform
def mycode(cmd1,cmd2):
    print("Please wait. Cleaning the screen....")
    time.sleep(2)
    os.system(cmd1)
    print("Please wait finding the list of dir and files")
    time.sleep(2)
    os.system(cmd2)
if platform.system()=="Windows":
    mycode("cls","dir")
else:
    mycode('clear','ls -lrt')



2. Reading and writing to text files using python 

#!/usr/bin/env python

file_ops=open("random.txt",'w')
file_ops.write("This is a first line\n")
file_ops.write("This is a second line\n")
file_ops.write("This is a third line")
file_ops.close()

NB: if a file already exists with this same name, running this script would override the existing content of the file.
if the file does not exist, running this code would create a new file. 


ALTERNATIVELY 

data_content=["This is a data-1\n","This is a data-2\n","This is a data-3"]
file_ops = open("acada.txt", 'w')

file_ops.writelines(data_content)
file_ops.close()

3. Appending and reading a file 

-Appending:

my_content = ['This is using loop-iteratioin-1', 'This is using loop-iterantion-2', 'This is using loop-iteratioin-3']

fo = open("with_loop.txt", 'a')

for each_line in my_content:
    fo.write(each_line + "\n")
fo.close()

-Reading:

fo = open("with_loop.txt","r")
data = fo.read()
fo.close()
print(data)


- Reading a single line n

fo=open("with_loop.txt","r")
print(fo.readline())
print(fo.readline())
fo.close()


4. Copying the contents of a file to another file. 

#!/usr/bin/env python
import shutil

#sfile="C:\\Users\\Automation\\Desktop\\random.txt"
#dfile="C:\\Users\\Automation\\Downloads\\newrandom.txt"
sfile=input("Enter your source file: ")
dfile=input("Enter your destination file: ")
shutil.move(sfile, dfile)

sfo=open(sfile,'r')
content=sfo.read()
sfo.close()

dfo=open(dfile,'w')
dfo.write(content)
dfo.close()



5. Working with json files 

import json 
#Read a json file

req_file="myjson.json"

fo = open(req_file,'r')
#print(fo.read())                   ==> if this was an ordinary text file, we'll run this
print(json.load(fo))

fo.close()


- Write data(dictionary data) into a json file

my_dict={'Name':'Acada Learning','Courses':['Python','Linux','Terraform','Git','AWS']}

req_file = "myinfo.json"

fo = open(req_file,'w')
json.dump(my_dict, fo, indent=4)

fo.close()


- Importance of knowing this: It helps you to understand how to transmit and receive data between
                              a server and web application in json format. 


6. Introduction to csv files and How to read a csv files using python?

- We use csv to store tabular form of data. Data in rows and columns 

S_N, Name, Salary, Skill 
1, Tunde, 200000$, Python 
2, Susan, 180000$, DockerSwarm  
3, Dela, 210000$, Kubernetes

import csv 
req_file="C:\\Users\\Automation\\Desktop\\hi\\new_info.csv"

fo = open(req_file,"r")
content = csv.reader(fo, delimiter=",")
for each in content:
    print(each)

fo.close()



7. Transfer file from local server to remote server and vice versa 

import paramiko

ssh = paramiko.SSHClient()                                                                      ==> helps to create an SSHClient
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())                                       ==> set add policy 
ssh.connect(hostname='54.165.97.91',username='ec2-user',password='paramiko123',port=22)         ==> connect to the server  
sftp_client = ssh.open_sftp()

sftp_client.get('/home/ec2-user/paramiko_download.txt','paramiko_downloaded_file.txt')         ==> downloads file to local 

sftp_client.close()
ssh.close()                     ==> It is important to close your ssh server after fini



The End 




#sftp_client.chdir("/home/ec2-user")
#print(sftp_client.getcwd())
#sftp_client.get('demo.txt','C:\\Users\\Automation\\Desktop\\download_file.txt')
sftp_client.put("transfer_files.py",'/home/ec2-user/transfer_files.py')
sftp_client.close()
ssh.close()                     ==> It is important to close your ssh server after fini

